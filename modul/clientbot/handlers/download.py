from aiogram import html, Bot
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __

from clientbot import shortcuts
from clientbot.data.states import Download
from db.models import TaskModel, TaskType
from loader import client_bot_router, bot_session
from config import scheduler
from clientbot.keyboards.reply_kb import download_main_menu, main_menu
import yt_dlp
import os


@client_bot_router.message(text=__("–ù–∞–∑–∞–¥"), state=Download.download)
async def music_menu(message: Message, state: FSMContext):
    await message.answer(
        _("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}").format(full_name=html.quote(message.from_user.full_name)),
        reply_markup=await main_menu(message.from_user.id)
    )
    await state.clear()


@client_bot_router.message(text=__("üåê –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ"))  # —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
async def music_menu(message: Message, state: FSMContext):
    await message.answer(_("–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å"))


@client_bot_router.message(text=__("üé• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ"))
async def music_menu(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Download.download)
    # await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Youtube –∏–ª–∏ –¢–∏–∫–¢–æ–∫ –≤–∏–¥–µ–æ –∏ —è –µ–≥–æ —Å–∫–∞—á–∞—é –¥–ª—è –≤–∞—Å", reply_markup=await download_main_menu())
    user_name = f"{message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name else ''}"
    await message.answer(
        _("ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç-–∑–∞–≥—Ä—É–∑—á–∏–∫.\r\n\r\n"
          "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ/—Ñ–∞–π–ª—ã/–∞—Ä—Ö–∏–≤—ã —Å *Youtube, Instagram, TikTok, Facebook, SoundCloud, Vimeo, –í–∫–æ–Ω—Ç–∞–∫—Ç–µ, Twitter –∏ 1000+ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ/—Ñ–∞–π–ª–æ–≤—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤*. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ URL –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –º–µ–¥–∏–∞ –∏–ª–∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª.").format(
            user_name=user_name),
        reply_markup=await download_main_menu(),
        parse_mode="Markdown"
    )


@client_bot_router.message(state=Download.download)
async def youtube_download_handler(message: Message, bot: Bot):
    await message.answer(_('üì• –°–∫–∞—á–∏–≤–∞—é...'))
    if not message.text:
        await message.answer(_('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ'))
        return
    if 'streaming' in message.text:
        await message.answer(_('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Å—Ç—Ä–∏–º—ã'))
        return
    me = await bot.get_me()
    await shortcuts.add_to_analitic_data(me.username, message.text)
    if 'instagram' in message.text:
        new_url = message.text.replace('www.', 'dd')
        await message.answer(
            _('{new_url}\r\n–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @{username}').format(new_url=new_url, username=me.username))
        return
    client = await shortcuts.get_user(message.from_user.id)
    await TaskModel.create(
        client=client,
        task_type=TaskType.DOWNLOAD_MEDIA,
        data={
            "url": message.text,
        }
    )
